name: Build Native Executables

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

# 添加必要的权限
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build:
    name: Build on ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux AMD64
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            executable_suffix: ""
            artifact_name: airopscat-linux-amd64
          # Linux ARM64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            executable_suffix: ""
            artifact_name: airopscat-linux-arm64
          # macOS AMD64 (Intel)
          - os: macos-latest
            platform: macos
            arch: amd64
            executable_suffix: ""
            artifact_name: airopscat-macos-amd64
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            platform: macos
            arch: arm64
            executable_suffix: ""
            artifact_name: airopscat-macos-arm64
          # Windows AMD64
          - os: windows-latest
            platform: windows
            arch: amd64
            executable_suffix: ".exe"
            artifact_name: airopscat-windows-amd64.exe
          # Windows ARM64
          - os: windows-latest
            platform: windows
            arch: arm64
            executable_suffix: ".exe"
            artifact_name: airopscat-windows-arm64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm-community'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{ matrix.arch }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-${{ matrix.arch }}-m2

    - name: Verify GraalVM installation
      run: |
        echo "GRAALVM_HOME: $GRAALVM_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Platform: ${{ matrix.platform }}"
        echo "Architecture: ${{ matrix.arch }}"
        java --version
        native-image --version

    - name: Build with Maven
      run: ./mvnw clean compile

    - name: Run tests
      run: ./mvnw test

    - name: Build native executable
      run: ./mvnw -Pnative native:compile
      env:
        # 设置目标架构
        NATIVE_IMAGE_ARCH: ${{ matrix.arch }}

    - name: Rename executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        move target\airopscat.exe target\${{ matrix.artifact_name }}
      shell: cmd

    - name: Rename executable (Unix)
      if: matrix.platform != 'windows'
      run: |
        mv target/airopscat target/${{ matrix.artifact_name }}

    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: target/${{ matrix.artifact_name }}
        retention-days: 30

    - name: Create distribution directory
      run: mkdir -p dist

    - name: Copy executable to dist (Windows)
      if: matrix.platform == 'windows'
      run: copy target\${{ matrix.artifact_name }} dist\
      shell: cmd

    - name: Copy executable to dist (Unix)
      if: matrix.platform != 'windows'
      run: cp target/${{ matrix.artifact_name }} dist/

    - name: Create README for distribution
      run: |
        echo "# AirOpsCat Native Executable" > dist/README.txt
        echo "" >> dist/README.txt
        echo "Platform: ${{ matrix.platform }}" >> dist/README.txt
        echo "Architecture: ${{ matrix.arch }}" >> dist/README.txt
        echo "Built on: $(date)" >> dist/README.txt
        echo "Version: ${{ github.ref_name }}" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "## Usage" >> dist/README.txt
        echo "./${{ matrix.artifact_name }}" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "The application will start on http://localhost:8080" >> dist/README.txt

    - name: Create distribution archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        7z a -tzip ${{ matrix.artifact_name }}.zip dist\*
      shell: cmd

    - name: Create distribution archive (Unix)
      if: matrix.platform != 'windows'
      run: |
        cd dist && tar -czf ../${{ matrix.artifact_name }}.tar.gz *

    - name: Upload distribution archive
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-distribution
        path: |
          ${{ matrix.artifact_name }}.zip
          ${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded files
      run: |
        echo "Downloaded artifacts:"
        find . -name "*.tar.gz" -o -name "*.zip" -o -name "*.exe" | sort

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          **/airopscat-*.tar.gz
          **/airopscat-*.zip
          **/airopscat-*.exe
        body: |
          ## AirOpsCat ${{ github.ref_name }}
          
          Native executables for Linux, macOS, and Windows (AMD64 and ARM64).
          
          ### Download Instructions:
          
          #### Linux
          - **AMD64**: Download `airopscat-linux-amd64.tar.gz`
          - **ARM64**: Download `airopscat-linux-arm64.tar.gz`
          
          #### macOS
          - **Intel (AMD64)**: Download `airopscat-macos-amd64.tar.gz`
          - **Apple Silicon (ARM64)**: Download `airopscat-macos-arm64.tar.gz`
          
          #### Windows
          - **AMD64**: Download `airopscat-windows-amd64.exe.zip`
          - **ARM64**: Download `airopscat-windows-arm64.exe.zip`
          
          ### Usage:
          1. Extract the archive (if applicable)
          2. Run the executable directly
          3. Open http://localhost:8080 in your browser
          
          ### System Requirements:
          - No Java runtime required (native executable)
          - Linux: x86_64 or ARM64 architecture
          - macOS: x86_64 (Intel Macs) or ARM64 (Apple Silicon) architecture
          - Windows: x86_64 or ARM64 architecture
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 