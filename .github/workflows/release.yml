name: Build Native Executables

on:
  # ! 为了避免重复发布版本，应当通过独特 git tag 触发。
  # ! 不再使用 workflow_dispatch 触发。
  # workflow_dispatch:
  push:
    # 只通过 v*.*.* 的 tag 触发发布，避免在 main 分支 push 时触发。
    tags:
      - "v*.*.*"
permissions: write-all

jobs:
  build-linux:
    name: Build Linux Native Executable
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Linux native executable in Docker
      run: |
        # 使用 Ubuntu 20.04 Docker 容器来编译，确保 GLIBC 兼容性
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          ubuntu:20.04 \
          bash -c "
            set -e
            # 更新包管理器并安装必要的工具
            apt-get update
            apt-get install -y curl wget build-essential zlib1g-dev
            
            # 下载并安装 GraalVM
            cd /tmp
            wget https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_linux-x64_bin.tar.gz
            tar -xzf graalvm-community-jdk-21.0.2_linux-x64_bin.tar.gz
            export GRAALVM_HOME=/tmp/graalvm-community-openjdk-21.0.2+13.1
            export JAVA_HOME=\$GRAALVM_HOME
            export PATH=\$GRAALVM_HOME/bin:\$PATH
            
            # 验证安装
            echo 'GRAALVM_HOME: '\$GRAALVM_HOME
            echo 'JAVA_HOME: '\$JAVA_HOME
            java --version
            native-image --version
            
            # 显示 GLIBC 版本信息
            echo 'GLIBC version info:'
            ldd --version
            echo 'Available GLIBC versions:'
            strings /lib/x86_64-linux-gnu/libc.so.6 | grep GLIBC_ | sort -V | tail -10
            
            # 构建项目
            cd /workspace
            ./mvnw clean compile -Dmaven.repo.local=/tmp/.m2/repository
            ./mvnw -Pnative native:compile -Dmaven.repo.local=/tmp/.m2/repository
            
            # 重命名可执行文件
            mv target/airopscat target/airopscat-linux-amd64
          "

    - name: Upload Linux executable
      uses: actions/upload-artifact@v4
      with:
        name: airopscat-linux-amd64
        path: target/airopscat-linux-amd64
        retention-days: 30

    - name: Create Linux distribution
      run: |
        mkdir -p dist
        cp target/airopscat-linux-amd64 dist/
        echo "# AirOpsCat Native Executable" > dist/README.txt
        echo "" >> dist/README.txt
        echo "Platform: linux" >> dist/README.txt
        echo "Built on: $(date)" >> dist/README.txt
        echo "Version: ${{ github.ref_name }}" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "## Usage" >> dist/README.txt
        echo "./airopscat-linux-amd64" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "The application will start on http://localhost:8080" >> dist/README.txt
        echo "" >> dist/README.txt
        echo "## System Requirements" >> dist/README.txt
        echo "Linux: Requires GLIBC 2.31 or higher (compatible with Debian 12)" >> dist/README.txt
        
        cd dist && tar -czf ../airopscat-linux-amd64.tar.gz *

    - name: Upload Linux distribution archive
      uses: actions/upload-artifact@v4
      with:
        name: airopscat-linux-amd64-distribution
        path: airopscat-linux-amd64.tar.gz
        retention-days: 30

  build-windows:
    name: Build Windows Native Executable
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm-community'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Verify GraalVM installation
      run: |
        echo "GRAALVM_HOME: $env:GRAALVM_HOME"
        echo "JAVA_HOME: $env:JAVA_HOME"
        java --version
        native-image --version

    - name: Build with Maven
      run: ./mvnw clean compile

    - name: Build native executable
      run: ./mvnw -Pnative native:compile

    - name: Rename executable
      run: |
        move target\airopscat.exe target\airopscat-windows-amd64.exe
      shell: cmd

    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: airopscat-windows-amd64.exe
        path: target/airopscat-windows-amd64.exe
        retention-days: 30

    - name: Create Windows distribution
      run: |
        mkdir dist
        copy target\airopscat-windows-amd64.exe dist\
        echo # AirOpsCat Native Executable > dist\README.txt
        echo. >> dist\README.txt
        echo Platform: windows >> dist\README.txt
        echo Built on: %DATE% >> dist\README.txt
        echo Version: ${{ github.ref_name }} >> dist\README.txt
        echo. >> dist\README.txt
        echo ## Usage >> dist\README.txt
        echo airopscat-windows-amd64.exe >> dist\README.txt
        echo. >> dist\README.txt
        echo The application will start on http://localhost:8080 >> dist\README.txt
        7z a -tzip airopscat-windows-amd64.exe.zip dist\*
      shell: cmd

    - name: Upload Windows distribution archive
      uses: actions/upload-artifact@v4
      with:
        name: airopscat-windows-amd64.exe-distribution
        path: airopscat-windows-amd64.exe.zip
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          **/airopscat-*
        body: |
          ## AirOpsCat ${{ github.ref_name }}
          
          Native executables for Linux, Windows.
          
          ### Download Instructions:
          - **Linux**: Download `airopscat-linux-amd64.tar.gz`
          - **Windows**: Download `airopscat-windows-amd64.exe.zip`
          
          ### Usage:
          1. Extract the archive (if applicable)
          2. Run the executable directly
          3. Open http://localhost:8080 in your browser
          
          ### System Requirements:
          - No Java runtime required (native executable)
          - Linux: x86_64 architecture, GLIBC 2.31+ (compatible with Debian 12, Ubuntu 20.04+)
          - Windows: x86_64 architecture
          
          ### Compatibility:
          - **Debian 12**: ✅ Supported (built with GLIBC 2.31)
          - **Ubuntu 20.04+**: ✅ Supported
          - **CentOS 8+**: ✅ Supported
          - **RHEL 8+**: ✅ Supported
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 